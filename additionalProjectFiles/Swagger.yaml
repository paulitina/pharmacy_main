swagger: "2.0"
info:
  description: "This is a sample server Pharmacy server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Pharmacy"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "pharmacy.swagger.io"
basePath: "/v2"
schemes:
  - "https"
  - "http"
paths:
  /product:
    post:
      tags:
        - "product"
      summary: "Add a new product to the pharmacy"
      description: ""
      operationId: "addProduct"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "product that needs to be added to the pharmacy"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "405":
          description: "Invalid input"
    put:
      tags:
        - "product"
      summary: "Update an existing product"
      description: ""
      operationId: "updateProduct"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Product object that needs to be added to the pharmacy"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
        "405":
          description: "Validation exception"
    get:
      tags:
        - "product"
      summary: "Get list of products"
      description: ""
      operationId: "getProducts"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "list of products in Catalog"
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/Product"
      responses:
        "200":
          description: "successful operation"
  /product/{productId}:
    get:
      tags:
        - "product"
      summary: "Get detailed info about product"
      description: ""
      operationId: "getDetailedProductInfo"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "productId of product that needs to be got"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "list of products in Catalog"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "200":
          description: "Valid get"
  /order:
    post:
      tags:
        - "order"
      summary: "Place an order for product"
      description: ""
      operationId: "placeOrder"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "order placed for purchasing products"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /order/cart/:
    get:
      tags:
        - "order"
      summary: "Get order with status = cart"
      description: ""
      operationId: "getCartOrder"
      produces:
        - "application/json"
      parameters:
        - name: "status"
          in: "query"
          description: "Status"
          required: true
          type: "string"
          default: "cart"
        - in: "body"
          name: "body"
          description: "order in cart"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
    put:
      tags:
        - "order"
      summary: "Change quantity of products in order with status = cart"
      description: ""
      operationId: "changeQuantity"
      produces:
        - "application/json"
      parameters:
        - name: "quantity"
          in: "query"
          description: "Quantity"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "quantity of products in order"
          required: true
          schema:
            $ref: "#/definitions/OrderProducts"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/OrderProducts"
        "400":
          description: "Invalid Order"
  /order/all:
    get:
      tags:
        - "order"
      summary: "Finds placed orders by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPlacedOrdersByStatus"
      produces:
        - "application/json"
      parameters:
        - name: "status"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: true
          type: "array"
          items:
            type: "string"
            enum:
              - "placed"
              - "approved"
              - "delivered"
              - "finished"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        "400":
          description: "Invalid status value"
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can be done by each visitor."
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "Enter username"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "Enter password"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
definitions:
  Order:
    type: "object"
    properties:
      orderId:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "Order Status"
        enum:
          - "cart"
          - "placed"
          - "approved"
          - "delivered"
          - "finished"
      address:
        type: "string"
    xml:
      name: "Order"
  OrderProducts:
    type: "object"
    properties:
      productId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int64"
  User:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      passwordHash:
        type: "string"
      passwordSalt:
        type: "string"
      type:
        type: "string"
    xml:
      name: "User"
  Product:
    type: "object"
    properties:
      productId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      indications:
        type: "string"
      manufacturerInfo:
        type: "string"
      sideEffects:
        type: "string"
      quantity:
        type: "integer"
        format: "int64"
      price:
        type: "integer"
        format: "int64"
      prescripted:
        type: "boolean"
      image:
        type: "string"
        format: "byte"
    xml:
      name: "Product"